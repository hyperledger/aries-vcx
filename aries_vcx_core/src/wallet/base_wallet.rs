use std::collections::HashMap;

use async_trait::async_trait;

#[cfg(feature = "vdrtools_wallet")]
use crate::WalletHandle;

use crate::errors::error::VcxCoreResult;
use crate::utils::async_fn_iterator::AsyncFnIterator;

/// Trait defining standard 'wallet' related functionality. The APIs, including
/// input and output types are loosely based off the indy Wallet API:
/// see: <https://github.com/hyperledger/indy-sdk/blob/main/libindy/src/api/wallet.rs>
#[async_trait]
pub trait BaseWallet: std::fmt::Debug + Send + Sync {
    #[cfg(feature = "vdrtools_wallet")]
    fn get_wallet_handle(&self) -> WalletHandle;

    // ----- DIDs
    async fn create_and_store_my_did(
        &self,
        seed: Option<&str>,
        method_name: Option<&str>,
    ) -> VcxCoreResult<(String, String)>;

    async fn key_for_local_did(&self, did: &str) -> VcxCoreResult<String>;

    // returns new temp_verkey and remembers it internally
    async fn replace_did_keys_start(&self, target_did: &str) -> VcxCoreResult<String>;

    // replaces the `target_did`'s current verkey with the one last generated by `replace_did_keys_start`
    async fn replace_did_keys_apply(&self, target_did: &str) -> VcxCoreResult<()>;

    // ---- records

    async fn add_wallet_record(
        &self,
        xtype: &str,
        id: &str,
        value: &str,
        tags: Option<HashMap<String, String>>,
    ) -> VcxCoreResult<()>;

    async fn get_wallet_record(&self, xtype: &str, id: &str, options: &str) -> VcxCoreResult<String>;

    async fn get_wallet_record_value(&self, xtype: &str, id: &str) -> VcxCoreResult<String>;

    async fn delete_wallet_record(&self, xtype: &str, id: &str) -> VcxCoreResult<()>;

    async fn update_wallet_record_value(&self, xtype: &str, id: &str, value: &str) -> VcxCoreResult<()>;

    async fn add_wallet_record_tags(&self, xtype: &str, id: &str, tags: HashMap<String, String>) -> VcxCoreResult<()>;

    async fn update_wallet_record_tags(
        &self,
        xtype: &str,
        id: &str,
        tags: HashMap<String, String>,
    ) -> VcxCoreResult<()>;

    async fn delete_wallet_record_tags(&self, xtype: &str, id: &str, tag_names: &str) -> VcxCoreResult<()>;

    async fn iterate_wallet_records(
        &self,
        xtype: &str,
        query: &str,
        options: &str,
    ) -> VcxCoreResult<Box<dyn AsyncFnIterator<Item = VcxCoreResult<String>>>>;

    // ---- crypto

    async fn sign(&self, my_vk: &str, msg: &[u8]) -> VcxCoreResult<Vec<u8>>;

    async fn verify(&self, vk: &str, msg: &[u8], signature: &[u8]) -> VcxCoreResult<bool>;

    async fn pack_message(&self, sender_vk: Option<&str>, receiver_keys: &str, msg: &[u8]) -> VcxCoreResult<Vec<u8>>;

    async fn unpack_message(&self, msg: &[u8]) -> VcxCoreResult<Vec<u8>>;
}

#[async_trait]
pub trait AsyncFnIteratorCollect {
    type Item;

    async fn collect(&mut self) -> VcxCoreResult<Vec<Self::Item>>;
}

#[async_trait]
impl AsyncFnIteratorCollect for Box<dyn AsyncFnIterator<Item = VcxCoreResult<String>>> {
    type Item = String;

    async fn collect(&mut self) -> VcxCoreResult<Vec<Self::Item>> {
        let mut collection: Vec<Self::Item> = vec![];
        while let Some(res) = self.next().await {
            collection.push(res?);
        }
        Ok(collection)
    }
}
