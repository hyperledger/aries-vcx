name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  workflow-setup:
    runs-on: ubuntu-20.04
    outputs:
      CACHE_KEY_POOL: ${{ steps.mainstep.outputs.CACHE_KEY_POOL }}
      CACHE_KEY_ANDROID: ${{ steps.mainstep.outputs.CACHE_KEY_ANDROID }}
      CACHE_KEY_LIBVCX: ${{ steps.mainstep.outputs.CACHE_KEY_LIBVCX }}
      CACHE_KEY_CODECOV: ${{ steps.mainstep.outputs.CACHE_KEY_CODECOV }}
      CACHE_KEY_ALPINE_CORE: ${{ steps.mainstep.outputs.CACHE_KEY_ALPINE_CORE }}
      DOCKER_IMG_NAME_POOL: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_POOL }}
      DOCKER_IMG_NAME_ANDROID: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_ANDROID }}
      DOCKER_IMG_NAME_AGENCY: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_AGENCY }}
      DOCKER_IMG_NAME_LIBVCX: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_LIBVCX }}
      DOCKER_IMG_NAME_CODECOV: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_CODECOV }}
      DOCKER_IMG_NAME_ALPINE_CORE: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_ALPINE_CORE }}
      PUBLISH_VERSION: ${{ steps.mainstep.outputs.PUBLISH_VERSION }}
      RELEASE: ${{ steps.mainstep.outputs.RELEASE }}
      PRERELEASE: ${{ steps.mainstep.outputs.PRERELEASE }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.55.0
      - name: Set outputs
        id: mainstep
        run: |
          set -x

          if [[ -z "$GITHUB_HEAD_REF" ]]; then # is set only if pipeline run is triggered as pull request
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Push"
          else
            BRANCH_NAME=$GITHUB_HEAD_REF
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Pull Request"
          fi

          BRANCH_NAME=`echo $BRANCH_NAME | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR Labels: ${{ toJson(github.event.pull_request.labels.*.name) }}"

            REPO_HEAD="${{ github.event.pull_request.head.repo.full_name }}" # source repository
            REPO_BASE="${{ github.event.pull_request.head.base.full_name }}" # target repository
            echo "This is pull request from $REPO_HEAD to $REPO_BASE"

            if [[ "$REPO_HEAD" == "${{ github.repository }}" ]]; then
              echo "This CI run is PR from non-forked repository."
              IS_FORK="false";
            else
              echo "This is fork."
              IS_FORK="true";
            fi;
          else
            echo "Not PR so this is not fork."
            IS_FORK="false";
          fi;

          REPO_VERSION_MOST_RECENT=$(git describe --tags --always --abbrev=0)
          REPO_VERSION_DESIRED=$(cargo pkgid --manifest-path libvcx/Cargo.toml | cut -d# -f2 | cut -d: -f2)
          echo "Highest released version was: $REPO_VERSION_MOST_RECENT, desired version (specified in libvcx/Cargo.toml) is $REPO_VERSION_DESIRED"

          RELEASE="false"
          PRERELEASE="false"

          if [[ "$IS_FORK" == "false" ]]; then
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              if [[ "${{ contains(github.event.pull_request.labels.*.name, 'pre-release') }}" == "true" ]]; then
                PRERELEASE="true"
              fi;
            elif [[ "${{ github.event_name }}" == "push" ]]; then
              if [[ "$BRANCH_NAME" == "main" && "$REPO_VERSION_DESIRED" != "$REPO_VERSION_MOST_RECENT" ]]; then
                PUBLISH_VERSION="$REPO_VERSION_DESIRED"
                RELEASE="true"
                echo "This is push to main, and version was bumped from $REPO_VERSION_MOST_RECENT to $REPO_VERSION_DESIRED. Will publish a release of $REPO_VERSION_DESIRED."
              fi;
            fi;

            if [[ -z "$PUBLISH_VERSION" ]]; then
              PUBLISH_VERSION="$REPO_VERSION_MOST_RECENT-$BRANCH_NAME-${{ github.run_number }}"
            fi;

            echo "CI will publish artifacts at version: $PUBLISH_VERSION"
          else
            echo "This PR is from fork, nothing will be published because the CI wouldn't be able to access repo secrets to perform publish."
            PUBLISH_VERSION=""
          fi;

          LIBVCX_SOURCE_HASH=${{ hashFiles('libvcx') }}
          ARIESVCX_SOURCE_HASH=${{ hashFiles('aries_vcx') }}
          AGENCY_CLIENT_HASH=${{ hashFiles('agency_client') }}

          LIBVCX_DOCKERFILE_HASH=${{ hashFiles('ci/libvcx.dockerfile') }}
          ALPINE_CORE_DOCKERFILE_HASH=${{ hashFiles('ci/alpine_core.dockerfile')}}
          CODECOV_DOCKERFILE_HASH=${{ hashFiles('ci/libvcx-codecov.dockerfile') }}

          JAVA_WRAPPERS_HASH=${{ hashFiles('wrappers/java') }}
          LIBVCX_NODE_WRAPPERS_HASH=${{ hashFiles('wrappers/node') }}
          LIBVCX_NODE_AGENT_HASH=${{ hashFiles('agents/node') }}

          POOL_DOCKERFILE_HASH=${{ hashFiles('ci/indy-pool.dockerfile')}}

          LIBVCX_HASH=${LIBVCX_SOURCE_HASH:0:11}-${ARIESVCX_SOURCE_HASH:0:11}-${LIBVCX_NODE_WRAPPERS_HASH:0:11}-${LIBVCX_NODE_AGENT_HASH:0:11}-${LIBVCX_DOCKERFILE_HASH:0:11}-${AGENCY_CLIENT_HASH:0:11}
          CODECOV_HASH=${LIBVCX_SOURCE_HASH:0:23}-${ARIESVCX_SOURCE_HASH:0:11}-${CODECOV_DOCKERFILE_HASH:0:23}
          ANDROID_HASH=${LIBVCX_SOURCE_HASH:0:15}-${ARIESVCX_SOURCE_HASH:0:11}-${JAVA_WRAPPERS_HASH:0:15}
          POOL_HASH=${POOL_DOCKERFILE_HASH:0:15}

          echo "::set-output name=PUBLISH_VERSION::$PUBLISH_VERSION"
          echo "::set-output name=RELEASE::$RELEASE"
          echo "::set-output name=PRERELEASE::$PRERELEASE"

          echo "::set-output name=CACHE_KEY_LIBVCX::$LIBVCX_HASH"
          echo "::set-output name=CACHE_KEY_CODECOV::$CODECOV_HASH"
          echo "::set-output name=CACHE_KEY_ANDROID::$ANDROID_HASH"
          echo "::set-output name=CACHE_KEY_POOL::$POOL_HASH"
          echo "::set-output name=CACHE_KEY_ALPINE_CORE::$ALPINE_CORE_DOCKERFILE_HASH"

          echo "::set-output name=DOCKER_IMG_NAME_ALPINE_CORE::alpine-core"
          echo "::set-output name=DOCKER_IMG_NAME_AGENCY::ghcr.io/absaoss/vcxagencynode/vcxagency-node:0.1.2"
          echo "::set-output name=DOCKER_IMG_NAME_ANDROID::android-test"
          echo "::set-output name=DOCKER_IMG_NAME_LIBVCX::libvcx:$LIBVCX_HASH"
          echo "::set-output name=DOCKER_IMG_NAME_CODECOV::codecov:$CODECOV_HASH"
          echo "::set-output name=DOCKER_IMG_NAME_POOL::indypool:$POOL_HASH"

  publish-ios-wrapper:
    needs: [workflow-setup]
    runs-on: macos-10.15
    env:
      LIBVCX_VERSION: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
      PUBLISH_VERSION: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
    - name: Switch to xcode version 11
      run: |
        ls /Applications | grep Xcode
        sudo xcode-select --switch /Applications/Xcode_11.7.app/Contents/Developer
        xcodebuild -version
#    - name: Build iOS wrapper
#      run: |
#          ./wrappers/ios/ci/build.sh
#    - uses: actions/upload-artifact@v2
#      with:
#        name: libvcx-ios-${{ env.PUBLISH_VERSION }}-device
#        path: /tmp/artifacts/libvcx-ios-${{ env.PUBLISH_VERSION }}-device.zip
#    - uses: actions/upload-artifact@v2
#      with:
#        name: libvcx-ios-${{ env.PUBLISH_VERSION }}-universal
#        path: /tmp/artifacts/libvcx-ios-${{ env.PUBLISH_VERSION }}-universal.zip
