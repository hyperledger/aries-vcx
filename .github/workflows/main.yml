name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**"

env:
  DOCKER_BUILDKIT: 1
  MAIN_BRANCH: main
  URL_DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_AGENCY: ghcr.io/absaoss/vcxagencynode/vcxagency-node:2.2.0
  DOCKER_IMAGE_POOL: pstas/indypool-localhost:1.15.0-localhost

  DOCKER_REPO_LOCAL_ALPINE_CORE: alpine-core
  DOCKER_REPO_LOCAL_LIBVCX: libvcx
  DOCKER_REPO_LOCAL_ANDROID: android-test

jobs:
  workflow-setup:
    runs-on: ubuntu-20.04
    outputs:
      PUBLISH_VERSION: ${{ steps.run-info.outputs.publish-version }}
      RELEASE: ${{ steps.run-info.outputs.release }}
      PRERELEASE: ${{ steps.run-info.outputs.pre-release }}
      BRANCH_NAME: ${{ steps.run-info.outputs.branch-name }}

      SKIP_IOS: ${{ steps.skip-info.outputs.skip-ios }}
      SKIP_ANDROID: ${{ steps.skip-info.outputs.skip-android }}

      DOCKER_IMG_CACHED_ALPINE_CORE: ${{ steps.docker-imgs.outputs.DOCKER_IMG_CACHED_ALPINE_CORE }}
      DOCKER_IMG_CACHED_LIBVCX: ${{ steps.docker-imgs.outputs.DOCKER_IMG_CACHED_LIBVCX }}
      DOCKER_IMG_CACHED_ANDROID: ${{ steps.docker-imgs.outputs.DOCKER_IMG_CACHED_ANDROID }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.64.0
      - name: "Construct CI run-info"
        id: run-info
        uses: ./.github/actions/construct-run-info
      - name: "Detect CI skip steps"
        id: skip-info
        uses: ./.github/actions/detect-skip-info
      - name: "Set outputs"
        id: docker-imgs
        run: |
          set -x
          HASH_DOCKERFILE_ALPINE_CORE=${{ hashFiles('ci/alpine_core.dockerfile')}}
          HASH_DOCKERFILE_LIBVCX=${{ hashFiles('ci/libvcx.dockerfile') }}
          HASH_SRC_LIBVCX=${{ hashFiles('libvcx') }}
          HASH_SRC_ARIESVCX=${{ hashFiles('aries_vcx') }}
          HASH_SRC_AGENCYCLIENT=${{ hashFiles('agency_client') }}
          HASH_SRC_MESSAGES=${{ hashFiles('messages') }}
          HASH_SRC_WRAPPER_JAVA=${{ hashFiles('wrappers/java') }}
          HASH_SRC_WRAPPER_NODEJS=${{ hashFiles('wrappers/node') }}
          HASH_SRC_AGENT_NODEJS=${{ hashFiles('agents/node') }}

          HASH_DOCKER_LIBVCX=${HASH_DOCKERFILE_LIBVCX:0:11}-${HASH_SRC_LIBVCX:0:11}-${HASH_SRC_ARIESVCX:0:11}-${HASH_SRC_AGENCYCLIENT:0:11}-${HASH_SRC_MESSAGES:0:11}
          HASH_DOCKER_ANDROID=${HASH_DOCKER_LIBVCX}-${HASH_SRC_ARIESVCX:0:11}-${HASH_SRC_WRAPPER_JAVA:0:15}

          echo "::set-output name=DOCKER_IMG_CACHED_ALPINE_CORE::$DOCKER_REPO_LOCAL_ALPINE_CORE:$HASH_DOCKERFILE_ALPINE_CORE"
          echo "::set-output name=DOCKER_IMG_CACHED_LIBVCX::$DOCKER_REPO_LOCAL_LIBVCX:$HASH_DOCKER_LIBVCX"
          echo "::set-output name=DOCKER_IMG_CACHED_ANDROID::$DOCKER_REPO_LOCAL_ANDROID:$HASH_DOCKER_ANDROID"

  ##########################################################################################
  ##############################   DOCKER BUILD   ##########################################

  build-docker-alpine-core:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ALPINE_CORE }}
      BRANCH_NAME: ${{ needs.workflow-setup.outputs.BRANCH_NAME }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.URL_DOCKER_REGISTRY }}
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build and cache image"
        uses: ./.github/actions/build-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          build-arg: "USER_ID=$UID"
          dockerfile-path: "ci/alpine_core.dockerfile"
          branch-name: ${{ env.BRANCH_NAME }}
          branch-main: ${{ env.MAIN_BRANCH }}
          docker-repo-local-name: ${{ env.DOCKER_REPO_LOCAL_ALPINE_CORE }}

  build-docker-libvcx:
    needs: [ workflow-setup, build-docker-alpine-core ]
    runs-on: ubuntu-20.04
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX }}
      DOCKER_IMG_CACHED_ALPINE_CORE: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ALPINE_CORE }}
      BRANCH_NAME: ${{ needs.workflow-setup.outputs.BRANCH_NAME }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.URL_DOCKER_REGISTRY }}
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load alpine core image"
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED_ALPINE_CORE }}
      - name: "Build and cache image"
        uses: ./.github/actions/build-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          build-arg: "ALPINE_CORE_IMAGE=$DOCKER_IMG_CACHED_ALPINE_CORE"
          dockerfile-path: "ci/libvcx.dockerfile"
          branch-name: ${{ env.BRANCH_NAME }}
          branch-main: ${{ env.MAIN_BRANCH }}
          docker-repo-local-name: ${{ env.DOCKER_REPO_LOCAL_LIBVCX }}

  build-docker-android:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    env:
      DOCKER_IMG_CACHED: ${{needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID}}
      BRANCH_NAME: ${{ needs.workflow-setup.outputs.BRANCH_NAME }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.URL_DOCKER_REGISTRY }}
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build and cache image"
        if: ${{ needs.workflow-setup.outputs.SKIP_ANDROID != 'true' }}
        uses: ./.github/actions/build-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          dockerfile-path: "wrappers/java/ci/android.dockerfile"
          branch-name: ${{ env.BRANCH_NAME }}
          branch-main: ${{ env.MAIN_BRANCH }}
          docker-repo-local-name: ${{ env.DOCKER_REPO_LOCAL_ANDROID }}

#
#  #  ##########################################################################################
#  #  ##############################   DOCKER PUBLISH   ########################################

  publish-docker-libvcx:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx ]
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX }}
      PUBLISH_VERSION: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
      BRANCH_NAME: ${{ needs.workflow-setup.outputs.BRANCH_NAME }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.URL_DOCKER_REGISTRY }}
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Publish versioned image"
        uses: ./.github/actions/publish-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          publish-version: ${{ env.PUBLISH_VERSION }}

#  #  ##########################################################################################
#  #  ###############################    CODECOV    ###########################################

  code-coverage-aries-vcx-unit-tests:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Setup rust codecov environment"
        uses: ./.github/actions/setup-codecov-rust
        with:
          skip-docker-setup: true
      - name: "Run workspace tests: general_test"
        run: |
          RUSTFLAGS='-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests' \
          RUSTDOCFLAGS='-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests' \
          RUST_TEST_THREADS=1 CARGO_INCREMENTAL=0 TEST_POOL_IP=127.0.0.1 cargo test --package aries-vcx -F 'general_test';

          mkdir -p /tmp/artifacts/coverage
          grcov ./target/debug/ -s . -t lcov --llvm --branch --ignore-not-existing -o /tmp/artifacts/coverage/coverage.lcov
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v2
        with:
          directory: /tmp/artifacts/coverage
          flags: unittests-aries-vcx
          name: codecov-unit-aries-vcx
          fail_ci_if_error: true
          path_to_write_report: /tmp/artifacts/coverage/codecov_report.gz
      - uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report-unit-aries-vcx
          path: /tmp/artifacts/coverage

  code-coverage-aries-vcx-integration-tests:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Setup rust codecov environment"
        uses: ./.github/actions/setup-codecov-rust
      - name: "Run workspace tests: pool_tests agency_pool_tests"
        run: |
          RUSTFLAGS='-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests' \
          RUSTDOCFLAGS='-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests' \
          RUST_TEST_THREADS=1 CARGO_INCREMENTAL=0 TEST_POOL_IP=127.0.0.1 cargo test --package aries-vcx -F 'pool_tests agency_pool_tests';

          mkdir -p /tmp/artifacts/coverage
          grcov ./target/debug/ -s . -t lcov --llvm --branch --ignore-not-existing -o /tmp/artifacts/coverage/coverage.lcov
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v2
        with:
          directory: /tmp/artifacts/coverage
          flags: unittests-aries-vcx
          name: codecov-unit-aries-vcx
          fail_ci_if_error: true
          path_to_write_report: /tmp/artifacts/coverage/codecov_report.gz
      - uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report-unit-aries-vcx
          path: /tmp/artifacts/coverage

#  #  ##########################################################################################
#  #  ###############################    TESTING    ###########################################

  test-unit-workspace:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Setup rust testing environment"
        uses: ./.github/actions/setup-testing-rust
        with:
          skip-docker-setup: true
      - name: "Run workspace tests: general_test"
        run: RUST_TEST_THREADS=1 cargo test --workspace --exclude aries-vcx-agent -F "general_test"

  test-integration-aries-vcx:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Setup rust testing environment"
        uses: ./.github/actions/setup-testing-rust
      - name: "Run aries-vcx tests: pool_tests agency_pool_tests"
        run: RUST_TEST_THREADS=1 cargo test --manifest-path="aries_vcx/Cargo.toml" -F "pool_tests agency_pool_tests"

  test-integration-aries-vcx-mysql:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Setup rust testing environment"
        uses: ./.github/actions/setup-testing-rust
      - name: "Run aries-vcx tests: mysql_test"
        run: RUST_TEST_THREADS=1 cargo test --manifest-path="aries_vcx/Cargo.toml" -F "mysql_test"

  test-integration-libvcx:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Setup rust testing environment"
        uses: ./.github/actions/setup-testing-rust
      - name: "Run libvcx tests: pool_tests"
        run: |
          RUST_TEST_THREADS=1 cargo test --manifest-path="libvcx/Cargo.toml" -F "pool_tests"

  test-node-wrapper:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Setup NodeJS libvcx testing environment"
        uses: ./.github/actions/setup-testing-nodejs
        with:
          skip-docker-setup: true
      - name: "Run tests"
        run: cd wrappers/node && npm run test

  test-integration-node-wrapper:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Setup NodeJS libvcx testing environment"
        uses: ./.github/actions/setup-testing-nodejs
      - name: "Install vcxagent-core dependencies"
        run: (cd agents/node/vcxagent-core && npm install)
      - name: "Run demo"
        run: (cd agents/node/vcxagent-core && AGENCY_URL=http://localhost:8080 npm run demo)
      - name: "Run demo with revocation"
        run: (cd agents/node/vcxagent-core && AGENCY_URL=http://localhost:8080 npm run demo:revocation)
      - name: "Run integration tests"
        run: (cd agents/node/vcxagent-core && AGENCY_URL=http://localhost:8080 npm run test:integration)

  test-android-build:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-android ]
    env:
      DOCKER_IMG_CACHED_ANDROID: ${{needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID}}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.URL_DOCKER_REGISTRY }}
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load android image"
        if: ${{ needs.workflow-setup.outputs.SKIP_ANDROID != 'true' }}
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED_ANDROID }}
      - name: "Run android tests"
        if: ${{ needs.workflow-setup.outputs.SKIP_ANDROID != 'true' }}
        run: |
          rm -rf /tmp/imgcache
          docker run --rm -i  $DOCKER_IMG_CACHED_ANDROID \
                              sh -c '(cd $HOME/aries-vcx && ./wrappers/java/ci/android.test.sh armv7)'

  build-and-publish-ios-wrapper:
    needs: workflow-setup
    runs-on: macos-11
    env:
      LIBVCX_VERSION: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
      PUBLISH_VERSION: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v2
      - name: Switch to xcode version 12.4
        if: ${{ needs.workflow-setup.outputs.SKIP_IOS != 'true' }}
        run: |
          sudo xcode-select --switch /Applications/Xcode_12.4.app/Contents/Developer
          xcodebuild -version
      - name: "Build iOS wrapper"
        if: ${{ needs.workflow-setup.outputs.SKIP_IOS != 'true' }}
        run: |
          ./wrappers/ios/ci/build.sh
      - uses: actions/upload-artifact@v2
        if: ${{ needs.workflow-setup.outputs.SKIP_IOS != 'true' }}
        with:
          name: libvcx-ios-${{ env.PUBLISH_VERSION }}-device
          path: /tmp/artifacts/libvcx-ios-${{ env.PUBLISH_VERSION }}-device.zip
      - uses: actions/upload-artifact@v2
        if: ${{ needs.workflow-setup.outputs.SKIP_IOS != 'true' }}
        with:
          name: libvcx-ios-${{ env.PUBLISH_VERSION }}-universal
          path: /tmp/artifacts/libvcx-ios-${{ env.PUBLISH_VERSION }}-universal.zip

  build-and-publish-android-device:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-android ]
    env:
      FULL_VERSION_NAME: libvcx-android-${{needs.workflow-setup.outputs.PUBLISH_VERSION}}-device
      DOCKER_IMG_CACHED_ANDROID: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.URL_DOCKER_REGISTRY }}
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load android image"
        if: ${{ needs.workflow-setup.outputs.SKIP_ANDROID != 'true' }}
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED_ANDROID }}
      - name: "Build, run android wrapper tests, and publish artifacts"
        if: ${{ needs.workflow-setup.outputs.SKIP_ANDROID != 'true' }}
        uses: ./.github/actions/publish-android
        with:
          abis: "arm arm64"
          docker-img-name: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID }}
          full-version-name: ${{ env.FULL_VERSION_NAME }}
      - name: "Publish aar artifact"
        if: ${{ needs.workflow-setup.outputs.SKIP_ANDROID != 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.FULL_VERSION_NAME }}
          path: /tmp/artifacts/aar/${{ env.FULL_VERSION_NAME }}.aar

  build-and-publish-android-emulator:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-android ]
    env:
      FULL_VERSION_NAME: libvcx-android-${{needs.workflow-setup.outputs.PUBLISH_VERSION}}-emulator
      DOCKER_IMG_CACHED_ANDROID: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.URL_DOCKER_REGISTRY }}
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load android image"
        if: ${{ needs.workflow-setup.outputs.SKIP_ANDROID != 'true' }}
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED_ANDROID }}
      - name: "Build, run android wrapper tests, and publish artifacts"
        if: ${{ needs.workflow-setup.outputs.SKIP_ANDROID != 'true' }}
        uses: ./.github/actions/publish-android
        with:
          abis: "x86 x86_64"
          docker-img-name: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID }}
          full-version-name: ${{ env.FULL_VERSION_NAME }}
      - uses: actions/upload-artifact@v2
        if: ${{ needs.workflow-setup.outputs.SKIP_ANDROID != 'true' }}
        with:
          name: ${{ env.FULL_VERSION_NAME }}
          path: /tmp/artifacts/aar/${{ env.FULL_VERSION_NAME }}.aar

  build-and-publish-ubuntu-lib:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.64.0
      - uses: Swatinem/rust-cache@v2
      - name: "Install dependencies"
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libsodium-dev libssl-dev libzmq3-dev
      - name: "Build libvcx.so"
        run: cargo build --release
      - name: "Publish artifact libvcx.so"
        uses: actions/upload-artifact@v2
        with:
          name: libvcx.so
          path: target/release/libvcx.so

  build-and-publish-darwin-lib:
    needs: workflow-setup
    runs-on: macos-11
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.64.0
      - uses: Swatinem/rust-cache@v2
      - name: "Install dependencies"
        shell: bash
        run: |
          brew install openssl
          brew install zeromq
          brew install libsodium
      - name: "Build libvcx.dylib"
        run: cargo build --release
      - name: "Publish artifact libvcx.dylib"
        uses: actions/upload-artifact@v2
        with:
          name: libvcx.dylib
          path: target/release/libvcx.dylib

#  #  ##########################################################################################
#  #  ############################   NPMJS PUBLISHING   #######################################

  publish-node-wrapper:
    runs-on: ubuntu-20.04
    needs:
      - workflow-setup
      - test-unit-workspace
      - test-integration-libvcx
      - test-integration-aries-vcx
      - test-integration-aries-vcx-mysql
      - test-node-wrapper
      - test-integration-node-wrapper
    env:
      PUBLISH_VERSION: ${{needs.workflow-setup.outputs.PUBLISH_VERSION}}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: Use Node.js 12
        uses: actions/setup-node@v3
        with:
          node-version: 12.x
      - name: "Run tests"
        run: |
          if [[ "$PUBLISH_VERSION" ]]
          then
            NPMJS_TOKEN=${{ secrets.NPMJS_TOKEN }} PUBLISH_VERSION=${{ env.PUBLISH_VERSION }} ./wrappers/node/publish.sh
          else
             echo "New version was not defined, skipping release."
          fi

  publish-agent-core:
    runs-on: ubuntu-20.04
    needs:
      - workflow-setup
      - test-unit-workspace
      - test-integration-libvcx
      - test-integration-aries-vcx
      - test-integration-aries-vcx-mysql
      - test-node-wrapper
      - test-integration-node-wrapper
    env:
      NPMJS_TOKEN: ${{ secrets.NPMJS_TOKEN }}
      PUBLISH_VERSION: ${{needs.workflow-setup.outputs.PUBLISH_VERSION}}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.URL_DOCKER_REGISTRY }}
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Release agent-core package"
        run: |
          if [[ "$PUBLISH_VERSION" ]]
          then
            NPMJS_TOKEN=${{ secrets.NPMJS_TOKEN }} PUBLISH_VERSION=${{ env.PUBLISH_VERSION }} ./agents/node/vcxagent-core/publish.sh
          else
             echo "New version was not defined, skipping release."
          fi

#  #  ##########################################################################################
#  #  ##############################      RELEASE      #########################################

  make-release:
    runs-on: ubuntu-20.04
    needs:
      - workflow-setup
      - build-and-publish-ios-wrapper
      - build-and-publish-android-device
      - build-and-publish-android-emulator
      - test-unit-workspace
      - test-integration-libvcx
      - test-integration-aries-vcx
      - test-integration-aries-vcx-mysql
      - test-android-build
      - test-node-wrapper
      - test-integration-node-wrapper
    if: ${{ needs.workflow-setup.outputs.RELEASE == 'true' || needs.workflow-setup.outputs.PRERELEASE == 'true' }}
    outputs:
      RELEASE_UPLOAD_URL: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v2
      - name: "Generate changelog"
        uses: heinrichreimer/action-github-changelog-generator@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          futureRelease: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
          releaseBranch: main
          pullRequests: true
          unreleased: true
          unreleasedOnly: true
          issuesWoLabels: true
          prWoLabels: true
          stripGeneratorNotice: true
          stripHeaders: false
          maxIssues: 50
          excludeLabels: duplicate,question,invalid,wontfix,changelog-excluded
          breakingLabels: backwards-incompatible,breaking
          deprecatedLabels: deprecated
          headerLabel: "# Changelog"
          breakingLabel: '### Breaking changes'
          enhancementLabel: '### Enhancements'
          bugsLabel: '### Bug fixes'
          deprecatedLabel: '###  Deprecations'
          removedLabel: '### Removals'
          securityLabel: '### Security fixes'
          issuesLabel: '### Other issues'
          prLabel: '### Other pull requests'
          addSections: '{"ci":{"prefix":"### CI changes","labels":["ci"]},"wrappers":{"prefix":"### Wrapper changes","labels":["wrappers"]},"agents":{"prefix":"### Changes to agents","labels":["agents"]},"features":{"prefix":"### Features","labels":["features"]},"hotfix":{"prefix":"### Hotfixes","labels":["hotfix"]},"security":{"prefix":"### Security fixes","labels":["security"]},"refactoring":{"prefix":"### Refactoring","labels":["refactoring"]},"tests":{"prefix":"### Tests","labels":["tests"]},"update":{"prefix":"### Updates","labels":["update"]}}'
          excludeTagsRegex: '^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))+)?)$'

      - name: "Create a new release"
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
          release_name: Release ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
          body_path: ./CHANGELOG.md
          draft: ${{ needs.workflow-setup.outputs.PRERELEASE == 'true' }}
          prerelease: ${{ needs.workflow-setup.outputs.PRERELEASE == 'true' }}

  release-android-device:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, make-release ]
    steps:
      - name: "Fetch android device build from artifacts"
        uses: actions/download-artifact@v2
        with:
          name: libvcx-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-device
      - name: "Upload release assets"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.make-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ./libvcx-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-device.aar
          asset_name: libvcx-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-device.aar
          asset_content_type: application/aar

  release-android-emulator:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, make-release ]
    steps:
      - name: "Fetch android emulator build from artifacts"
        uses: actions/download-artifact@v2
        with:
          name: libvcx-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-emulator
      - name: "Upload release assets"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.make-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ./libvcx-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-emulator.aar
          asset_name: libvcx-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-emulator.aar
          asset_content_type: application/aar

  release-ios-device:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, make-release ]
    steps:
      - name: "Fetch iOS device build from artifacts"
        uses: actions/download-artifact@v2
        with:
          name: libvcx-ios-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-device
      - name: "Upload release assets"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.make-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ./libvcx-ios-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-device.zip
          asset_name: libvcx-ios-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-device.zip
          asset_content_type: application/zip

  release-ios-universal:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, make-release ]
    steps:
      - name: "Fetch iOS universal build from artifacts"
        uses: actions/download-artifact@v2
        with:
          name: libvcx-ios-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-universal
      - name: "Upload release assets"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.make-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ./libvcx-ios-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-universal.zip
          asset_name: libvcx-ios-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-universal.zip
          asset_content_type: application/zip
