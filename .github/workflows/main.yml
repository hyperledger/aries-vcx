name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**"

env:
  DOCKER_BUILDKIT: 1
  URL_DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_AGENCY: ghcr.io/absaoss/vcxagencynode/vcxagency-node:2.2.0
  DOCKER_IMAGE_POOL: pstas/indypool-localhost:1.15.0-localhost

  DOCKER_REPO_LOCAL_ALPINE_CORE: alpine-core
  DOCKER_REPO_LOCAL_LIBVCX: libvcx
  DOCKER_REPO_LOCAL_LIBVCX_TESTER: libvcx-tester
  DOCKER_REPO_LOCAL_CODECOV: codecov
  DOCKER_REPO_LOCAL_ANDROID: android-test

jobs:
  workflow-setup:
    runs-on: ubuntu-20.04
    outputs:
      DOCKER_IMG_CACHED_ALPINE_CORE: ${{ steps.mainstep.outputs.DOCKER_IMG_CACHED_ALPINE_CORE }}
      DOCKER_IMG_CACHED_LIBVCX: ${{ steps.mainstep.outputs.DOCKER_IMG_CACHED_LIBVCX }}
      DOCKER_IMG_CACHED_LIBVCX_TESTER: ${{ steps.mainstep.outputs.DOCKER_IMG_CACHED_LIBVCX_TESTER }}
      DOCKER_IMG_CACHED_CODECOV: ${{ steps.mainstep.outputs.DOCKER_IMG_CACHED_CODECOV }}
      DOCKER_IMG_CACHED_ANDROID: ${{ steps.mainstep.outputs.DOCKER_IMG_CACHED_ANDROID }}

      PUBLISH_VERSION: ${{ steps.mainstep.outputs.PUBLISH_VERSION }}
      RELEASE: ${{ steps.mainstep.outputs.RELEASE }}
      PRERELEASE: ${{ steps.mainstep.outputs.PRERELEASE }}
      BRANCH_NAME: ${{ steps.mainstep.outputs.BRANCH_NAME }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.62.1
      - name: "Set outputs"
        id: mainstep
        run: |
          set -x

          if [[ -z "$GITHUB_HEAD_REF" ]]; then # is set only if pipeline run is triggered as pull request
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Push"
          else
            BRANCH_NAME=$GITHUB_HEAD_REF
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Pull Request"
          fi

          BRANCH_NAME=`echo $BRANCH_NAME | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR Labels: ${{ toJson(github.event.pull_request.labels.*.name) }}"

            REPO_HEAD="${{ github.event.pull_request.head.repo.full_name }}" # source repository
            REPO_BASE="${{ github.event.pull_request.head.base.full_name }}" # target repository
            echo "This is pull request from $REPO_HEAD to $REPO_BASE"

            if [[ "$REPO_HEAD" == "${{ github.repository }}" ]]; then
              echo "This CI run is PR from non-forked repository."
              IS_FORK="false";
            else
              echo "This is fork."
              IS_FORK="true";
            fi;
          else
            echo "Not PR so this is not fork."
            IS_FORK="false";
          fi;

          REPO_VERSION_MOST_RECENT=$(git describe --tags --always --abbrev=0)
          REPO_VERSION_DESIRED=$(cargo pkgid --manifest-path libvcx/Cargo.toml | cut -d# -f2 | cut -d: -f2)
          echo "Highest released version was: $REPO_VERSION_MOST_RECENT, desired version (specified in libvcx/Cargo.toml) is $REPO_VERSION_DESIRED"

          RELEASE="false"
          PRERELEASE="false"

          if [[ "$IS_FORK" == "false" ]]; then
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              if [[ "${{ contains(github.event.pull_request.labels.*.name, 'pre-release') }}" == "true" ]]; then
                PRERELEASE="true"
              fi;
            elif [[ "${{ github.event_name }}" == "push" ]]; then
              if [[ "$BRANCH_NAME" == "main" && "$REPO_VERSION_DESIRED" != "$REPO_VERSION_MOST_RECENT" ]]; then
                PUBLISH_VERSION="$REPO_VERSION_DESIRED"
                RELEASE="true"
                echo "This is push to main, and version was bumped from $REPO_VERSION_MOST_RECENT to $REPO_VERSION_DESIRED. Will publish a release of $REPO_VERSION_DESIRED."
              fi;
            fi;

            if [[ -z "$PUBLISH_VERSION" ]]; then
              PUBLISH_VERSION="$REPO_VERSION_MOST_RECENT-$BRANCH_NAME-${{ github.run_number }}"
            fi;

            echo "CI will publish artifacts at version: $PUBLISH_VERSION"
          else
            echo "This PR is from fork, nothing will be published because the CI wouldn't be able to access repo secrets to perform publish."
            PUBLISH_VERSION=""
          fi;

          HASH_DOCKERFILE_ALPINE_CORE=${{ hashFiles('ci/alpine_core.dockerfile')}}
          HASH_DOCKERFILE_LIBVCX=${{ hashFiles('ci/libvcx.dockerfile') }}
          HASH_DOCKERFILE_LIBVCX_TESTER=${{ hashFiles('ci/libvcx-tester.dockerfile') }}
          HASH_DOCKERFILE_CODECOV=${{ hashFiles('ci/libvcx-codecov.dockerfile') }}
          HASH_SRC_LIBVCX=${{ hashFiles('libvcx') }}
          HASH_SRC_ARIESVCX=${{ hashFiles('aries_vcx') }}
          HASH_SRC_AGENCYCLIENT=${{ hashFiles('agency_client') }}
          HASH_SRC_MESSAGES=${{ hashFiles('messages') }}
          HASH_SRC_WRAPPER_JAVA=${{ hashFiles('wrappers/java') }}
          HASH_SRC_WRAPPER_NODEJS=${{ hashFiles('wrappers/node') }}
          HASH_SRC_AGENT_NODEJS=${{ hashFiles('agents/node') }}

          HASH_DOCKER_LIBVCX=${HASH_DOCKERFILE_LIBVCX:0:11}-${HASH_SRC_LIBVCX:0:11}-${HASH_SRC_ARIESVCX:0:11}-${HASH_SRC_AGENCYCLIENT:0:11}-${HASH_SRC_MESSAGES:0:11}
          HASH_DOCKER_LIBVCX_TESTER=${HASH_DOCKER_LIBVCX}-${HASH_DOCKERFILE_LIBVCX_TESTER:0:11}-${HASH_SRC_WRAPPER_NODEJS:0:11}-${HASH_SRC_AGENT_NODEJS:0:11}
          HASH_DOCKER_CODECOV=${HASH_DOCKER_LIBVCX}-${HASH_SRC_ARIESVCX:0:11}-${HASH_SRC_AGENCYCLIENT:0:11}-${HASH_SRC_MESSAGES:0:11}-${HASH_DOCKERFILE_CODECOV:0:23}
          HASH_DOCKER_ANDROID=${HASH_DOCKER_LIBVCX}-${HASH_SRC_ARIESVCX:0:11}-${HASH_SRC_WRAPPER_JAVA:0:15}

          echo "::set-output name=DOCKER_IMG_CACHED_ALPINE_CORE::$DOCKER_REPO_LOCAL_ALPINE_CORE:$HASH_DOCKERFILE_ALPINE_CORE"
          echo "::set-output name=DOCKER_IMG_CACHED_LIBVCX::$DOCKER_REPO_LOCAL_LIBVCX:$HASH_DOCKER_LIBVCX"
          echo "::set-output name=DOCKER_IMG_CACHED_LIBVCX_TESTER::$DOCKER_REPO_LOCAL_LIBVCX_TESTER:$HASH_DOCKER_LIBVCX_TESTER"
          echo "::set-output name=DOCKER_IMG_CACHED_CODECOV::$DOCKER_REPO_LOCAL_CODECOV:$HASH_DOCKER_CODECOV"
          echo "::set-output name=DOCKER_IMG_CACHED_ANDROID::$DOCKER_REPO_LOCAL_ANDROID:$HASH_DOCKER_ANDROID"
          
          echo "::set-output name=BRANCH_NAME::$BRANCH_NAME"
          echo "::set-output name=PUBLISH_VERSION::$PUBLISH_VERSION"
          echo "::set-output name=RELEASE::$RELEASE"
          echo "::set-output name=PRERELEASE::$PRERELEASE"

  ##########################################################################################
  ##############################   DOCKER BUILD   ##########################################

  build-docker-alpine-core:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ALPINE_CORE }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build and cache image"
        uses: ./.github/actions/build-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          build-arg: "USER_ID=$UID"
          dockerfile-path: "ci/alpine_core.dockerfile"
          branch-name: ${{ env.BRANCH_NAME }}
          branch-main: ${{ env.MAIN_BRANCH }}
          docker-repo-local-name: ${{ env.DOCKER_REPO_LOCAL_ALPINE_CORE }}

  build-docker-libvcx:
    needs: [ workflow-setup, build-docker-alpine-core ]
    runs-on: ubuntu-20.04
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX }}
      DOCKER_IMG_CACHED_ALPINE_CORE: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ALPINE_CORE }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load alpine core image"
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED_ALPINE_CORE }}
      - name: "Build and cache image"
        uses: ./.github/actions/build-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          build-arg: "ALPINE_CORE_IMAGE=$DOCKER_IMG_CACHED_ALPINE_CORE"
          dockerfile-path: "ci/libvcx.dockerfile"
          branch-name: ${{ env.BRANCH_NAME }}
          branch-main: ${{ env.MAIN_BRANCH }}
          docker-repo-local-name: ${{ env.DOCKER_REPO_LOCAL_LIBVCX }}

  build-docker-libvcx-tester:
    needs: [ workflow-setup, build-docker-alpine-core ]
    runs-on: ubuntu-20.04
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX_TESTER }}
      DOCKER_IMG_CACHED_ALPINE_CORE: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ALPINE_CORE }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load alpine core image"
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED_ALPINE_CORE }}
      - name: "Build and cache image"
        uses: ./.github/actions/build-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          build-arg: "ALPINE_CORE_IMAGE=$DOCKER_IMG_CACHED_ALPINE_CORE"
          dockerfile-path: "ci/libvcx-tester.dockerfile"
          branch-name: ${{ env.BRANCH_NAME }}
          branch-main: ${{ env.MAIN_BRANCH }}
          docker-repo-local-name: ${{ env.DOCKER_REPO_LOCAL_LIBVCX_TESTER }}

  build-docker-codecov:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_CODECOV }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build and cache image"
        uses: ./.github/actions/build-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          dockerfile-path: "ci/libvcx-codecov.dockerfile"
          branch-name: ${{ env.BRANCH_NAME }}
          branch-main: ${{ env.MAIN_BRANCH }}
          docker-repo-local-name: ${{ env.DOCKER_REPO_LOCAL_CODECOV }}
          
  build-docker-android:
    needs: workflow-setup
    runs-on: ubuntu-20.04
    env:
      DOCKER_IMG_CACHED: ${{needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID}}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build and cache image"
        uses: ./.github/actions/build-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          dockerfile-path: "wrappers/java/ci/android.dockerfile"
          branch-name: ${{ env.BRANCH_NAME }}
          branch-main: ${{ env.MAIN_BRANCH }}
          docker-repo-local-name: ${{ env.DOCKER_REPO_LOCAL_ANDROID }}


  #  ##########################################################################################
  #  ##############################   DOCKER PUBLISH   ########################################
  
  publish-docker-alpine-core:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-alpine-core ]
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ALPINE_CORE }}
      BRANCH_NAME: ${{ needs.workflow-setup.outputs.BRANCH_NAME }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Publish branch image"
        uses: ./.github/actions/publish-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          publish-version: ${{ env.BRANCH_NAME }}
  
  publish-docker-libvcx:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx ]
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX }}
      PUBLISH_VERSION: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
      BRANCH_NAME: ${{ needs.workflow-setup.outputs.BRANCH_NAME }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Publish versioned image"
        uses: ./.github/actions/publish-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          publish-version: ${{ env.PUBLISH_VERSION }}
      - name: "Publish branch image"
        uses: ./.github/actions/publish-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          publish-version: ${{ env.BRANCH_NAME }}
  
  publish-docker-libvcx-tester:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx-tester ]
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX_TESTER }}
      BRANCH_NAME: ${{ needs.workflow-setup.outputs.BRANCH_NAME }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Publish branch image"
        uses: ./.github/actions/publish-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          publish-version: ${{ env.BRANCH_NAME }}
  
  publish-docker-codecov:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-codecov ]
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_CODECOV }}
      BRANCH_NAME: ${{ needs.workflow-setup.outputs.BRANCH_NAME }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Publish branch image"
        uses: ./.github/actions/publish-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          publish-version: ${{ env.BRANCH_NAME }}
  
  publish-docker-android:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-android ]
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID }}
      BRANCH_NAME: ${{ needs.workflow-setup.outputs.BRANCH_NAME }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Publish branch image"
        uses: ./.github/actions/publish-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
          publish-version: ${{ env.BRANCH_NAME }}
  
  #  ##########################################################################################
  #  ###############################    TESTING    ###########################################

  code-coverage-aries-vcx-unit-tests:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-codecov ]
    env:
      DOCKER_IMG_CACHED_CODECOV: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_CODECOV }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load codecov image"
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED_CODECOV }}
      - name: "Create codecov artifacts directory"  
        run: mkdir -p /tmp/artifacts/coverage
      - name: "Run quick unit tests"
        uses: ./.github/actions/code-coverage
        with:
          test-features: general_test
          test-path: aries-vcx
          codecov-img-name: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_CODECOV }}
          cov-file-path: /tmp/artifacts/coverage
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v2
        with:
          directory: /tmp/artifacts/coverage
          flags: unittests-aries-vcx
          name: codecov-unit-aries-vcx
          fail_ci_if_error: true
          path_to_write_report: /tmp/artifacts/coverage/codecov_report.gz
      - uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report-unit-aries-vcx
          path: /tmp/artifacts/coverage

  code-coverage-aries-vcx-integration-tests:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-codecov ]
    env:
      DOCKER_IMG_CACHED_CODECOV: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_CODECOV }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Setup for testing"
        uses: ./.github/actions/setup-testing
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED_CODECOV }}
      - name: "Run integration tests"
        uses: ./.github/actions/code-coverage
        with:
          test-features: 'pool_tests agency_pool_tests agency_v2'
          test-path: aries-vcx
          codecov-img-name: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_CODECOV }}
          cov-file-path: /tmp/artifacts/coverage
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v2
        with:
          directory: /tmp/artifacts/coverage
          flags: integration-aries-vcx
          name: codecov-integration-aries-vcx
          fail_ci_if_error: true
          path_to_write_report: /tmp/artifacts/coverage/codecov_report.gz
      - uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report-integration-aries-vcx
          path: /tmp/artifacts/coverage

  code-coverage-agency-client-unit-tests:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-codecov ]
    env:
      DOCKER_IMG_CACHED_CODECOV: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_CODECOV }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load codecov image"
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED_CODECOV }}
      - name: "Create codecov artifacts directory"
        run: mkdir -p /tmp/artifacts/coverage
      - name: "Run integration tests"
        uses: ./.github/actions/code-coverage
      - name: "Run quick unit tests"
        uses: ./.github/actions/code-coverage
        with:
          test-features: general_test
          test-path: agency_client
          codecov-img-name: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_CODECOV }}
          cov-file-path: /tmp/artifacts/coverage
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v2
        with:
          directory: /tmp/artifacts/coverage
          flags: unittests-agency-client
          name: codecov-unit-agency-client
          fail_ci_if_error: true
          path_to_write_report: /tmp/artifacts/coverage/codecov_report.gz
      - uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report-unit-agency-client
          path: /tmp/artifacts/coverage

  test-libvcx-image-general_test:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx-tester ]
    env:
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX_TESTER }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load libvcx tester image"
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
      - name: "Run quick unit tests"
        run: |
          set -x
          docker run --rm \
             --name libvcx \
             --network host \
             $DOCKER_IMG_CACHED \
             sh -c 'set -e; \
                    export RUST_TEST_THREADS=1; \
                    export RUST_BACKTRACE=full; \
                    export RUST_LOG=error; \
                    cd $HOME; cargo test --features "general_test"'

  test-libvcx-image-pool-tests:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx-tester ]
    env:
      DOCKER_IMG_CACHED: ${{needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX_TESTER}}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Setup for testing"
        uses: ./.github/actions/setup-testing
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
      - name: "Run pool integration tests"
        run: |
          set -x
          docker run --rm --name libvcx \
              --network host \
              $DOCKER_IMG_CACHED sh -c 'set -ex; \
                  cd $HOME/libvcx; \
                  export RUST_TEST_THREADS=1; \
                  export TEST_POOL_IP=127.0.0.1;
                  cargo test --release --features "pool_tests agency_tests"; \
                  cd $HOME/aries_vcx; \
                  cargo test --release --features "pool_tests agency_v2"'
      - name: "Collect docker logs on failure"
        if: failure()
        uses: ./.github/actions/upload-docker-logs
        with:
          name: "docker-services-${{ github.job }}"

  test-libvcx-mysql-integration:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx-tester ]
    env:
      DOCKER_IMG_CACHED: ${{needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX_TESTER}}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Setup for testing"
        uses: ./.github/actions/setup-testing
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
      - name: "Run mysql integration tests"
        run: |
          set -x
          docker run --rm -i --name libvcx --network host $DOCKER_IMG_CACHED \
                              sh -c '(ls -lah $HOME && ls -lah $HOME/libvcx && cd $HOME/aries_vcx && \
                              RUST_TEST_THREADS=1 TEST_POOL_IP=127.0.0.1 cargo test --release --features "mysql_test")'
      - name: "Collect docker logs on failure"
        if: failure()
        uses: ./.github/actions/upload-docker-logs
        with:
          name: "docker-services-${{ github.job }}"

  test-libvcx-image-agency-pool-tests:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx-tester ]
    env:
      DOCKER_IMG_CACHED: ${{needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX_TESTER}}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Setup for testing"
        uses: ./.github/actions/setup-testing
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
      - name: Run agency+pool integration tests
        run: |
          set -x
          docker run --rm -i --name libvcx --network host $DOCKER_IMG_CACHED \
                              sh -c '(cd $HOME/aries_vcx && \
                              cargo --version && \
                              rustc --version && \
                              RUST_TEST_THREADS=1 TEST_POOL_IP=127.0.0.1 cargo test --release --features "agency_pool_tests")'
      - name: "Collect docker logs on failure"
        if: failure()
        uses: ./.github/actions/upload-docker-logs
        with:
          name: "docker-services-${{ github.job }}"

  test-android-build:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-android ]
    env:
      DOCKER_IMG_CACHED_ANDROID: ${{needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID}}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load android image"
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED_ANDROID }}
      - name: "Run android tests"
        run: |
          rm -rf /tmp/imgcache
          docker run --rm -i  $DOCKER_IMG_CACHED_ANDROID \
                              sh -c '(cd $HOME/aries-vcx && ./wrappers/java/ci/android.test.sh armv7)'

  test-node-wrapper:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx-tester ]
    env:
      NPMJS_TOKEN: ${{ secrets.NPMJS_TOKEN }}
      DOCKER_IMG_CACHED: ${{needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX_TESTER }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load libvcx tester image"
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
      - name: "Run wrapper tests"
        run: |
          set -x
          docker run --rm -i --name libvcx --network host -e NPMJS_TOKEN=$NPMJS_TOKEN $DOCKER_IMG_CACHED \
            sh -c '(
              cd $HOME/wrappers/node && \
              npm install && \
              npm run tscversion && \
              npm run compile && \
              npm run test)'

  test-integration-node-wrapper:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx-tester ]
    env:
      NPMJS_TOKEN: ${{ secrets.NPMJS_TOKEN }}
      DOCKER_IMG_CACHED: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX_TESTER }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Setup for testing"
        uses: ./.github/actions/setup-testing
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
      - name: "Run wrapper demo"
        run: |
          set -x
          docker run --rm --name libvcx \
              --network host \
              -e AGENCY_URL=http://localhost:8080 \
              -e NPMJS_TOKEN=$NPMJS_TOKEN \
              $DOCKER_IMG_CACHED sh -c 'set -ex; \
                  cd $HOME/wrappers/node; \
                  npm install; \
                  npm run compile; \
                  cd $HOME/agents/node/vcxagent-core; \
                  npm install; \
                  npm run demo'
      - name: "Run wrapper demo with revocation"
        run: |
          set -x
          docker run --rm --name libvcx \
              --network host \
              -e AGENCY_URL=http://localhost:8080 \
              -e NPMJS_TOKEN=$NPMJS_TOKEN \
              $DOCKER_IMG_CACHED sh -c 'set -ex; \
                  cd $HOME/wrappers/node; \
                  npm install; \
                  npm run compile; \
                  cd $HOME/agents/node/vcxagent-core; \
                  npm install; \
                  npm run demo:revocation'
      - name: "Run integration tests"
        run: |
          set -x
          docker run --rm --name libvcx \
              --network host \
              -e NPMJS_TOKEN=$NPMJS_TOKEN \
              $DOCKER_IMG_CACHED sh -c 'set -ex; \
                  cd $HOME/wrappers/node; npm install; npm run compile; \
                  cd $HOME/agents/node/vcxagent-core; npm install; \
                  cd $HOME/agents/node/vcxagent-cli;  npm install; \
                  cd $HOME/agents/node/vcxagent-core; npm run test:integration'
      - name: "Collect docker logs on failure"
        if: failure()
        uses: ./.github/actions/upload-docker-logs
        with:
          name: "docker-services-${{ github.job }}"

  build-and-publish-ios-wrapper:
    needs: workflow-setup
    runs-on: macos-11
    env:
      LIBVCX_VERSION: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
      PUBLISH_VERSION: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v2
      - name: Switch to xcode version 12.4
        run: |
          sudo xcode-select --switch /Applications/Xcode_12.4.app/Contents/Developer
          xcodebuild -version
      - name: "Build iOS wrapper"
        run: |
          ./wrappers/ios/ci/build.sh
      - uses: actions/upload-artifact@v2
        with:
          name: libvcx-ios-${{ env.PUBLISH_VERSION }}-device
          path: /tmp/artifacts/libvcx-ios-${{ env.PUBLISH_VERSION }}-device.zip
      - uses: actions/upload-artifact@v2
        with:
          name: libvcx-ios-${{ env.PUBLISH_VERSION }}-universal
          path: /tmp/artifacts/libvcx-ios-${{ env.PUBLISH_VERSION }}-universal.zip

  build-and-publish-android-device:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-android ]
    env:
      FULL_VERSION_NAME: libvcx-android-${{needs.workflow-setup.outputs.PUBLISH_VERSION}}-device
      DOCKER_IMG_CACHED_ANDROID: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load android image"
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED_ANDROID }}
      - name: "Build, run android wrapper tests, and publish artifacts"
        uses: ./.github/actions/publish-android
        with:
          abis: "arm arm64"
          docker-img-name: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID }}
          full-version-name: ${{ env.FULL_VERSION_NAME }}
      - name: "Publish aar artifact"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.FULL_VERSION_NAME }}
          path: /tmp/artifacts/aar/${{ env.FULL_VERSION_NAME }}.aar

  build-and-publish-android-emulator:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-android ]
    env:
      FULL_VERSION_NAME: libvcx-android-${{needs.workflow-setup.outputs.PUBLISH_VERSION}}-emulator
      DOCKER_IMG_CACHED_ANDROID: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load android image"
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED_ANDROID }}
      - name: "Build, run android wrapper tests, and publish artifacts"
        uses: ./.github/actions/publish-android
        with:
          abis: "x86 x86_64"
          docker-img-name: ${{ needs.workflow-setup.outputs.DOCKER_IMG_CACHED_ANDROID }}
          full-version-name: ${{ env.FULL_VERSION_NAME }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.FULL_VERSION_NAME }}
          path: /tmp/artifacts/aar/${{ env.FULL_VERSION_NAME }}.aar

  #  ##########################################################################################
  #  ############################   NPMJS PUBLISHING   #######################################
  
  publish-node-wrapper:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx-tester, test-libvcx-image-general_test, test-libvcx-image-pool-tests, test-libvcx-image-agency-pool-tests, test-node-wrapper, test-integration-node-wrapper ]
    env:
      NPMJS_TOKEN: ${{ secrets.NPMJS_TOKEN }}
      DOCKER_IMG_CACHED: ${{needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX_TESTER}}
      PUBLISH_VERSION: ${{needs.workflow-setup.outputs.PUBLISH_VERSION}}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load image"
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
      - name: "Release wrapper"
        run: |
          if [[ "$PUBLISH_VERSION" ]]
          then
            echo "Releasing node wrapper version $PUBLISH_VERSION..."
            docker run --rm -i --network host \
                   -e NPMJS_TOKEN="$NPMJS_TOKEN" \
                   -e PUBLISH_VERSION="$PUBLISH_VERSION" \
                    "$DOCKER_IMG_CACHED" sh -c '$HOME/wrappers/node/publish.sh'
          else
             echo "New version was not defined, skipping release."
          fi

  publish-agent-core:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx-tester, test-libvcx-image-general_test, test-libvcx-image-pool-tests, test-libvcx-image-agency-pool-tests, test-node-wrapper, test-integration-node-wrapper ]
    env:
      NPMJS_TOKEN: ${{ secrets.NPMJS_TOKEN }}
      DOCKER_IMG_CACHED: ${{needs.workflow-setup.outputs.DOCKER_IMG_CACHED_LIBVCX_TESTER}}
      PUBLISH_VERSION: ${{needs.workflow-setup.outputs.PUBLISH_VERSION}}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v3
      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: env.URL_DOCKER_REGISTRY
          username: env.GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Load image"
        uses: ./.github/actions/load-image
        with:
          docker-img: ${{ env.DOCKER_IMG_CACHED }}
      - name: "Release agent-core package"
        run: |
          if [[ "$PUBLISH_VERSION" ]]
          then
            echo "Releasing node wrapper version $PUBLISH_VERSION..."
            docker run --rm -i --name libvcx --network host \
                   -e NPMJS_TOKEN="$NPMJS_TOKEN" \
                   -e PUBLISH_VERSION="$PUBLISH_VERSION" \
                    "$DOCKER_IMG_CACHED" sh -c '$HOME/agents/node/vcxagent-core/publish.sh'
          else
             echo "New version was not defined, skipping release."
          fi

  #  ##########################################################################################
  #  ##############################      RELEASE      #########################################
  
  make-release:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx, build-docker-android, build-and-publish-ios-wrapper, build-and-publish-android-device, build-and-publish-android-emulator, test-libvcx-image-general_test, test-libvcx-image-pool-tests, test-libvcx-image-agency-pool-tests, test-android-build, test-node-wrapper, test-integration-node-wrapper ]
    if: ${{ needs.workflow-setup.outputs.RELEASE == 'true' || needs.workflow-setup.outputs.PRERELEASE == 'true' }}
    outputs:
      RELEASE_UPLOAD_URL: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: "Git checkout"
        uses: actions/checkout@v2
      - name: "Generate changelog"
        uses: heinrichreimer/github-changelog-generator-action@v2.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          futureRelease: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
          releaseBranch: main
          pullRequests: true
          unreleased: true
          unreleasedOnly: true
          issuesWoLabels: true
          prWoLabels: true
          stripGeneratorNotice: true
          stripHeaders: false
          maxIssues: 50
          excludeLabels: duplicate,question,invalid,wontfix,changelog-excluded
          breakingLabels: backwards-incompatible,breaking
          deprecatedLabels: deprecated
          headerLabel: "# Changelog"
          breakingLabel: '### Breaking changes'
          enhancementLabel: '### Enhancements'
          bugsLabel: '### Bug fixes'
          deprecatedLabel: '###  Deprecations'
          removedLabel: '### Removals'
          securityLabel: '### Security fixes'
          issuesLabel: '### Other issues'
          prLabel: '### Other pull requests'
          addSections: '{"ci":{"prefix":"### CI changes","labels":["ci"]},"wrappers":{"prefix":"### Wrapper changes","labels":["wrappers"]},"agents":{"prefix":"### Changes to agents","labels":["agents"]},"features":{"prefix":"### Features","labels":["features"]},"hotfix":{"prefix":"### Hotfixes","labels":["hotfix"]},"security":{"prefix":"### Security fixes","labels":["security"]},"refactoring":{"prefix":"### Refactoring","labels":["refactoring"]},"tests":{"prefix":"### Tests","labels":["tests"]},"update":{"prefix":"### Updates","labels":["update"]}}'
          excludeTagsRegex: '^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))+)?)$'

      - name: "Create a new release"
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
          release_name: Release ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
          body_path: ./CHANGELOG.md
          draft: ${{ needs.workflow-setup.outputs.PRERELEASE == 'true' }}
          prerelease: ${{ needs.workflow-setup.outputs.PRERELEASE == 'true' }}

  release-android-device:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-android, build-and-publish-ios-wrapper, build-and-publish-android-device, build-and-publish-android-emulator, make-release ]
    steps:
      - name: "Fetch android device build from artifacts"
        uses: actions/download-artifact@v2
        with:
          name: libvcx-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-device
      - name: "Upload release assets"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.make-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ./libvcx-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-device.aar
          asset_name: libvcx-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-device.aar
          asset_content_type: application/aar

  release-android-emulator:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-android, build-and-publish-ios-wrapper, build-and-publish-android-device, build-and-publish-android-emulator, make-release ]
    steps:
      - name: "Fetch android emulator build from artifacts"
        uses: actions/download-artifact@v2
        with:
          name: libvcx-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-emulator
      - name: "Upload release assets"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.make-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ./libvcx-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-emulator.aar
          asset_name: libvcx-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-emulator.aar
          asset_content_type: application/aar

  release-ios-device:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-libvcx, build-docker-android, build-and-publish-ios-wrapper, build-and-publish-android-device, build-and-publish-android-emulator, make-release ]
    steps:
      - name: "Fetch iOS device build from artifacts"
        uses: actions/download-artifact@v2
        with:
          name: libvcx-ios-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-device
      - name: "Upload release assets"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.make-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ./libvcx-ios-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-device.zip
          asset_name: libvcx-ios-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-device.zip
          asset_content_type: application/zip

  release-ios-universal:
    runs-on: ubuntu-20.04
    needs: [ workflow-setup, build-docker-android, build-and-publish-ios-wrapper, build-and-publish-android-device, build-and-publish-android-emulator, make-release ]
    steps:
      - name: "Fetch iOS universal build from artifacts"
        uses: actions/download-artifact@v2
        with:
          name: libvcx-ios-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-universal
      - name: "Upload release assets"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.make-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ./libvcx-ios-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-universal.zip
          asset_name: libvcx-ios-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}-universal.zip
          asset_content_type: application/zip
