interface ProfileHolder {

};

dictionary WalletConfig {
    string wallet_name;
    string wallet_key;
    string wallet_key_derivation;
    string? wallet_type;
    string? storage_config;
    string? storage_credentials;
    string? rekey;
    string? rekey_derivation_method;
};

dictionary ConnectionState {
    ConnectionRole role;
    ConnectionProtocolState protocol_state;
};

enum ConnectionRole {
    "Invitee",
    "Inviter",
};

enum ConnectionProtocolState {
    "Initial",
    "Invited",
    "Requested",
    "Responded",
    "Completed",
};

dictionary PairwiseInfo {
    string pw_did;
    string pw_vk;
};

dictionary UnpackMessage {
    string message;
    string recipient_verkey;
    string? sender_verkey;
};

interface Connection {
    [Throws=VcxUniFFIError]
    ConnectionState get_state();

    [Throws=VcxUniFFIError]
    PairwiseInfo pairwise_info();

    [Throws=VcxUniFFIError]
    void accept_invitation(ProfileHolder profile, string invitation);

    [Throws=VcxUniFFIError]
    void handle_request(ProfileHolder profile, string request, string service_endpoint, sequence<string> routing_keys);

    [Throws=VcxUniFFIError]
    void handle_response(ProfileHolder profile, string response);

    [Throws=VcxUniFFIError]
    void send_request(ProfileHolder profile, string service_endpoint, sequence<string> routing_keys);

    [Throws=VcxUniFFIError]
    void send_response(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    void send_ack(ProfileHolder profile);
};

[Error]
enum VcxUniFFIError {
    "AriesVcxError",
    "SerializationError",
    "InternalError",
    "StringParseError"
};

namespace vcx {
    [Throws=VcxUniFFIError]
    ProfileHolder new_indy_profile(WalletConfig wallet_config);

    [Throws=VcxUniFFIError]
    Connection create_inviter(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    Connection create_invitee(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    UnpackMessage unpack_message(ProfileHolder profile, string packed_msg);
};
