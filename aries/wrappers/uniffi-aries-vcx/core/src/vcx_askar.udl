interface ProfileHolder {

};

enum ArgonLevel {
    "Interactive",
    "Moderate",
};

[Enum]
interface AskarKdfMethod {
    Argon2i(ArgonLevel inner);
};

[Enum]
interface KeyMethod {
    DeriveKey(AskarKdfMethod inner);
    RawKey();
    Unprotected();
};

dictionary AskarWalletConfig {
    string db_url;
    KeyMethod key_method;
    string pass_key;
    string profile;
};

dictionary ConnectionState {
    ConnectionRole role;
    ConnectionProtocolState protocol_state;
};

enum ConnectionRole {
    "Invitee",
    "Inviter",
};

enum ConnectionProtocolState {
    "Initial",
    "Invited",
    "Requested",
    "Responded",
    "Completed",
};

dictionary PairwiseInfo {
    string pw_did;
    string pw_vk;
};

dictionary UnpackMessage {
    string message;
    string recipient_verkey;
    string? sender_verkey;
};

interface Connection {
    [Throws=VcxUniFFIError]
    ConnectionState get_state();

    [Throws=VcxUniFFIError]
    PairwiseInfo pairwise_info();

    [Throws=VcxUniFFIError]
    void accept_invitation(ProfileHolder profile, string invitation);

    [Throws=VcxUniFFIError]
    void handle_request(ProfileHolder profile, string request, string service_endpoint, sequence<string> routing_keys);

    [Throws=VcxUniFFIError]
    void handle_response(ProfileHolder profile, string response);

    [Throws=VcxUniFFIError]
    void send_request(ProfileHolder profile, string service_endpoint, sequence<string> routing_keys);

    [Throws=VcxUniFFIError]
    void send_response(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    void send_ack(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    void send_message(ProfileHolder profile, string message);
};

interface Holder {
    [Throws=VcxUniFFIError]
    void set_proposal(string credential_proposal);

    [Throws=VcxUniFFIError]
    void prepare_credential_request(ProfileHolder profile, string my_pw_did);

    [Throws=VcxUniFFIError]
    string get_msg_credential_request();

    [Throws=VcxUniFFIError]
    string decline_offer(string? comment);

    [Throws=VcxUniFFIError]
    void process_credential(ProfileHolder profile, string credential);

    [Throws=VcxUniFFIError]
    boolean is_terminal_state();

    [Throws=VcxUniFFIError]
    HolderState get_state();

    [Throws=VcxUniFFIError]
    string get_source_id();

    [Throws=VcxUniFFIError]
    string get_credential();

    [Throws=VcxUniFFIError]
    string get_attributes();

    [Throws=VcxUniFFIError]
    string get_attachment();

    [Throws=VcxUniFFIError]
    string get_offer();

    [Throws=VcxUniFFIError]
    string get_tails_location();

    [Throws=VcxUniFFIError]
    string get_tails_hash();

    [Throws=VcxUniFFIError]
    string get_rev_reg_id();

    [Throws=VcxUniFFIError]
    string get_cred_id();

    [Throws=VcxUniFFIError]
    string get_thread_id();

    [Throws=VcxUniFFIError]
    boolean is_revokable(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    boolean is_revoked(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    u32 get_cred_rev_id(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    string get_problem_report();

    [Throws=VcxUniFFIError]
    string? get_final_message();
};

enum HolderState {
    "Initial",
    "ProposalSet",
    "OfferReceived",
    "RequestSet",
    "Finished",
    "Failed"
};

[Error]
enum VcxUniFFIError {
    "AriesVcxError",
    "AriesVcxWalletError",
    "SerializationError",
    "InternalError",
    "StringParseError"
};

namespace vcx {
    [Throws=VcxUniFFIError]
    ProfileHolder new_indy_profile(AskarWalletConfig wallet_config, string genesis_file_path);

    [Throws=VcxUniFFIError]
    Connection create_inviter(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    Connection create_invitee(ProfileHolder profile);

    [Throws=VcxUniFFIError]
    UnpackMessage unpack_message(ProfileHolder profile, string packed_msg);

    [Throws=VcxUniFFIError]
    Holder create(string source_id);

    [Throws=VcxUniFFIError]
    Holder create_from_offer(string source_id, string offer_message);

    [Throws=VcxUniFFIError]
    Holder create_with_proposal(string source_id, string propose_credential);

    [Throws=VcxUniFFIError]
    string get_credentials(ProfileHolder profile);
};
