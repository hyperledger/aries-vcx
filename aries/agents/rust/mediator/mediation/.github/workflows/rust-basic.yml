name: Rust basic workflow

on:
  push:
    branches: [ "main", "ci-integration-test", "ci-cd", "dev", aries-vcx-mediator-integration]
  pull_request:
    branches: [ "main", "ci-integration-test", "ci-cd", "dev", aries-vcx-mediator-integration]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check for obvious errors
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Cargo cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-check-cache-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    - name: cargo check
      run: cargo check --verbose
  build:
    needs: check
    name: Build and cache
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Cargo build cache
      # Restore / save build cache to speed up operations
      # If no cache was found and job succeeds cache of paths will be created
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-build-cache-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-    
    - name: Build
      run: cargo build --verbose  
    - name: Upload built binary
      uses: actions/upload-artifact@v3.1.2
      with:
        # Artifact name
        name: xum-test-server # optional
        # A file, directory or wildcard pattern that describes what to upload
        path: /home/runner/work/axum-test-server/axum-test-server/target/debug/xum-test-server
        # The desired behavior if no files are found using the provided path.
        # Available Options:
        #    warn: Output a warning but do not fail the action
        #    error: Fail the action with an error message
        #    ignore: Do not output any warnings or errors, the action does not fail
        if-no-files-found: warn # optional, default is warn
        # Duration after which artifact will expire in days. 0 means using default retention.
        # Minimum 1 day. Maximum 90 days unless changed from the repository settings page.
        retention-days: 1 # optional
  lint:
    if: github.event_name == 'pull_request'
    name: Lint Action
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Cargo lint cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-lint-cache-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-        
    - name: Run linters
      run: cargo clippy --verbose --no-deps --all-targets -- -D warnings
  integration_test:
    needs: check
    runs-on: ubuntu-latest
    name: Integration testing
    services: 
      mysql:
        image: mysql:latest
        env:
          MYSQL_DATABASE: xum.mysql.db
          MYSQL_USER: admin
          MYSQL_PASSWORD: github.ci.password.no.prod
          MYSQL_ROOT_PASSWORD: github.ci.password.no.prod
        ports:
          - '3306:3306'
    env:
      MYSQL_URL: mysql://admin:github.ci.password.no.prod@localhost:3306/xum.mysql.db
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Cargo test cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-test-cache-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    - name: Install prerequisites (sqlx)
      run: cargo install sqlx-cli || true
    - name: Setup database
      run: DATABASE_URL=${MYSQL_URL} sqlx migrate run
    - name: E2E test endpoints
      run: |
        cargo run &
          sleep 5 && 
          cargo test --verbose -- --nocapture
