use crate::api_lib::errors::error::{LibvcxError, LibvcxErrorKind};
use crate::api_lib::errors::error;

impl From<LibvcxError> for u32 {
    fn from(error: LibvcxError) -> u32 {
        error.kind().into()
    }
}

impl From<LibvcxErrorKind> for u32 {
    fn from(code: LibvcxErrorKind) -> u32 {
        match code {
            LibvcxErrorKind::InvalidState => 1081,
            LibvcxErrorKind::InvalidConfiguration => 1004,
            LibvcxErrorKind::InvalidHandle => 1048,
            LibvcxErrorKind::InvalidJson => 1016,
            LibvcxErrorKind::InvalidOption => 1007,
            LibvcxErrorKind::InvalidMessagePack => 1019,
            LibvcxErrorKind::ObjectCacheError => 1070,
            LibvcxErrorKind::NoPaymentInformation => 1071,
            LibvcxErrorKind::NotReady => 1005,
            LibvcxErrorKind::InvalidRevocationDetails => 1091,
            LibvcxErrorKind::GeneralConnectionError => 1002,
            LibvcxErrorKind::IOError => 1074,
            LibvcxErrorKind::LibindyInvalidStructure => 1080,
            LibvcxErrorKind::TimeoutLibindy => 1038,
            LibvcxErrorKind::InvalidLibindyParam => 1067,
            LibvcxErrorKind::AlreadyInitialized => 1044,
            LibvcxErrorKind::CreateConnection => 1061,
            LibvcxErrorKind::InvalidConnectionHandle => 1003,
            LibvcxErrorKind::InvalidInviteDetail => 1045,
            LibvcxErrorKind::InvalidRedirectDetail => 1104,
            LibvcxErrorKind::DeleteConnection => 1060,
            LibvcxErrorKind::CreateCredDef => 1034,
            LibvcxErrorKind::CredDefAlreadyCreated => 1039,
            LibvcxErrorKind::InvalidCredDefHandle => 1037,
            LibvcxErrorKind::InvalidRevocationEntry => 1092,
            LibvcxErrorKind::CreateRevRegDef => 1095,
            LibvcxErrorKind::InvalidCredentialHandle => 1053,
            LibvcxErrorKind::CreateCredentialRequest => 1055,
            LibvcxErrorKind::InvalidIssuerCredentialHandle => 1015,
            LibvcxErrorKind::InvalidCredentialRequest => 1018,
            LibvcxErrorKind::InvalidCredential => 1054,
            LibvcxErrorKind::InsufficientTokenAmount => 1064,
            LibvcxErrorKind::InvalidProofHandle => 1017,
            LibvcxErrorKind::InvalidDisclosedProofHandle => 1049,
            LibvcxErrorKind::InvalidProof => 1023,
            LibvcxErrorKind::InvalidSchema => 1031,
            LibvcxErrorKind::InvalidProofCredentialData => 1027,
            LibvcxErrorKind::CreateProof => 1056,
            LibvcxErrorKind::InvalidRevocationTimestamp => 1093,
            LibvcxErrorKind::CreateSchema => 1041,
            LibvcxErrorKind::InvalidSchemaHandle => 1042,
            LibvcxErrorKind::InvalidSchemaSeqNo => 1040,
            LibvcxErrorKind::DuplicationSchema => 1088,
            LibvcxErrorKind::UnknownSchemaRejection => 1094,
            LibvcxErrorKind::WalletCreate => 1058,
            LibvcxErrorKind::MissingWalletName => 1076,
            LibvcxErrorKind::WalletAccessFailed => 1075,
            LibvcxErrorKind::InvalidWalletHandle => 1057,
            LibvcxErrorKind::DuplicationWallet => 1051,
            LibvcxErrorKind::WalletNotFound => 1079,
            LibvcxErrorKind::WalletRecordNotFound => 1073,
            LibvcxErrorKind::PoolLedgerConnect => 1025,
            LibvcxErrorKind::InvalidGenesisTxnPath => 1024,
            LibvcxErrorKind::CreatePoolConfig => 1026,
            LibvcxErrorKind::DuplicationWalletRecord => 1072,
            LibvcxErrorKind::WalletAlreadyOpen => 1052,
            LibvcxErrorKind::DuplicationMasterSecret => 1084,
            LibvcxErrorKind::DuplicationDid => 1083,
            LibvcxErrorKind::InvalidLedgerResponse => 1082,
            LibvcxErrorKind::InvalidAttributesStructure => 1021,
            LibvcxErrorKind::InvalidPaymentAddress => 1066,
            LibvcxErrorKind::NoEndpoint => 1006,
            LibvcxErrorKind::InvalidProofRequest => 1086,
            LibvcxErrorKind::NoPoolOpen => 1030,
            LibvcxErrorKind::PostMessageFailed => 1010,
            LibvcxErrorKind::LoggingError => 1090,
            LibvcxErrorKind::EncodeError => 1022,
            LibvcxErrorKind::UnknownError => 1001,
            LibvcxErrorKind::InvalidDid => 1008,
            LibvcxErrorKind::InvalidVerkey => 1009,
            LibvcxErrorKind::InvalidNonce => 1011,
            LibvcxErrorKind::InvalidUrl => 1013,
            LibvcxErrorKind::MissingWalletKey => 1069,
            LibvcxErrorKind::MissingPaymentMethod => 1087,
            LibvcxErrorKind::SerializationError => 1050,
            LibvcxErrorKind::NotBase58 => 1014,
            LibvcxErrorKind::InvalidHttpResponse => 1033,
            LibvcxErrorKind::InvalidMessages => 1020,
            LibvcxErrorKind::MissingExportedWalletPath => 1077,
            LibvcxErrorKind::MissingBackupKey => 1078,
            LibvcxErrorKind::UnknownLibndyError => 1035,
            LibvcxErrorKind::ActionNotSupported => 1103,
            LibvcxErrorKind::Common(num) => num,
            LibvcxErrorKind::LibndyError(num) => num,
            LibvcxErrorKind::NoAgentInformation => 1106,
            LibvcxErrorKind::RevRegDefNotFound => 1107,
            LibvcxErrorKind::RevDeltaNotFound => 1108,
            LibvcxErrorKind::RevDeltaFailedToClear => 1114,
            LibvcxErrorKind::PoisonedLock => 1109,
            LibvcxErrorKind::InvalidMessageFormat => 1111,
            LibvcxErrorKind::CreatePublicAgent => 1110,
            LibvcxErrorKind::CreateOutOfBand => 1112,
            LibvcxErrorKind::CreateAgent => 1113,
            LibvcxErrorKind::InvalidInput => 1115,
            LibvcxErrorKind::ParsingError => 1116,
            LibvcxErrorKind::UnimplementedFeature => 1117
        }
    }
}

