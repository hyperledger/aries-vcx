// This file is @generated by prost-build.
/// Resource stores the contents of a DID-Linked Resource
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Resource {
    /// bytes is the raw data of the Resource
    #[prost(bytes = "vec", tag = "1")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
/// Metadata stores the metadata of a DID-Linked Resource
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Metadata {
    /// collection_id is the ID of the collection that the Resource belongs to. Defined client-side.
    /// This field is the unique identifier of the DID linked to this Resource
    /// Format: <unique-identifier>
    ///
    /// Examples:
    /// - c82f2b02-bdab-4dd7-b833-3e143745d612
    /// - wGHEXrZvJxR8vw5P3UWH1j
    #[prost(string, tag = "1")]
    pub collection_id: ::prost::alloc::string::String,
    /// id is the ID of the Resource. Defined client-side.
    /// This field is a unique identifier for this specific version of the Resource.
    /// Format: <uuid>
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    /// name is a human-readable name for the Resource. Defined client-side.
    /// Does not change between different versions.
    /// Example: PassportSchema, EducationTrustRegistry
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    /// version is a human-readable semantic version for the Resource. Defined client-side.
    /// Stored as a string. OPTIONAL.
    /// Example: 1.0.0, v2.1.0
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
    /// resource_type is a Resource type that identifies what the Resource is. Defined client-side.
    /// This is NOT the same as the resource's media type.
    /// Example: AnonCredsSchema, StatusList2021
    #[prost(string, tag = "5")]
    pub resource_type: ::prost::alloc::string::String,
    /// List of alternative URIs for the SAME Resource.
    #[prost(message, repeated, tag = "6")]
    pub also_known_as: ::prost::alloc::vec::Vec<AlternativeUri>,
    /// media_type is IANA media type of the Resource. Defined ledger-side.
    /// Example: application/json, image/png
    #[prost(string, tag = "7")]
    pub media_type: ::prost::alloc::string::String,
    /// created is the time at which the Resource was created. Defined ledger-side.
    /// Format: RFC3339
    /// Example: 2021-01-01T00:00:00Z
    #[prost(message, optional, tag = "8")]
    pub created: ::core::option::Option<::prost_types::Timestamp>,
    /// checksum is a SHA-256 checksum hash of the Resource. Defined ledger-side.
    /// Example: d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f
    #[prost(string, tag = "9")]
    pub checksum: ::prost::alloc::string::String,
    /// previous_version_id is the ID of the previous version of the Resource. Defined ledger-side.
    /// This is based on the Resource's name and Resource type to determine whether it's the same Resource.
    /// Format: <uuid>
    #[prost(string, tag = "10")]
    pub previous_version_id: ::prost::alloc::string::String,
    /// next_version_id is the ID of the next version of the Resource. Defined ledger-side.
    /// This is based on the Resource's name and Resource type to determine whether it's the same Resource.
    /// Format: <uuid>
    #[prost(string, tag = "11")]
    pub next_version_id: ::prost::alloc::string::String,
}
/// AlternativeUri are alternative URIs that can be used to access the Resource.
/// By default, at least the DID URI equivalent of the Resource is populated.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlternativeUri {
    /// uri is the URI of the Resource.
    /// Examples:
    /// - did:cheqd:testnet:MjYxNzYKMjYxNzYK/resources/4600ea35-8916-4ac4-b412-55b8f49dd94e
    /// - <https://resolver..cheqd.net/1.0/identifiers/did:cheqd:testnet:MjYxNzYKMjYxNzYK/resources/4600ea35-8916-4ac4-b412-55b8f49dd94e>
    /// - <https://example.com/example.json>
    /// - <https://gateway.ipfs.io/ipfs/bafybeihetj2ng3d74k7t754atv2s5dk76pcqtvxls6dntef3xa6rax25xe>
    /// - ipfs://bafybeihetj2ng3d74k7t754atv2s5dk76pcqtvxls6dntef3xa6rax25xe
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
    /// description is a human-readable description of the URI. Defined client-side.
    /// Examples:
    /// - did-uri
    /// - http-uri
    /// - ipfs-uri
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
}
/// ResourceWithMetadata describes the overall structure of a DID-Linked Resource
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceWithMetadata {
    #[prost(message, optional, tag = "1")]
    pub resource: ::core::option::Option<Resource>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// QueryResourceRequest is the request type for the Query/Resource RPC method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryResourceRequest {
    /// collection_id is an identifier of the DidDocument the resource belongs to.
    /// Format: <unique-identifier>
    ///
    /// Examples:
    /// - c82f2b02-bdab-4dd7-b833-3e143745d612
    /// - wGHEXrZvJxR8vw5P3UWH1j
    #[prost(string, tag = "1")]
    pub collection_id: ::prost::alloc::string::String,
    /// id is a unique id of the resource.
    /// Format: <uuid>
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
}
/// QueryResourceResponse is the response type for the Query/Resource RPC method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryResourceResponse {
    /// Successful resolution of the resource returns the following:
    /// - resource is the requested resource
    /// - metadata is the resource metadata associated with the requested resource
    #[prost(message, optional, tag = "1")]
    pub resource: ::core::option::Option<ResourceWithMetadata>,
}
/// QueryResourceMetadataRequest is the request type for the Query/ResourceMetadata RPC method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryResourceMetadataRequest {
    /// collection_id is an identifier of the DidDocument the resource belongs to.
    /// Format: <unique-identifier>
    ///
    /// Examples:
    /// - c82f2b02-bdab-4dd7-b833-3e143745d612
    /// - wGHEXrZvJxR8vw5P3UWH1j
    #[prost(string, tag = "1")]
    pub collection_id: ::prost::alloc::string::String,
    /// id is a unique id of the resource.
    /// Format: <uuid>
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
}
/// QueryResourceMetadataResponse is the response type for the Query/ResourceMetadata RPC method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryResourceMetadataResponse {
    /// resource is the requested resource metadata
    #[prost(message, optional, tag = "1")]
    pub resource: ::core::option::Option<Metadata>,
}
/// QueryCollectionResourcesRequest is the request type for the Query/CollectionResources RPC method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCollectionResourcesRequest {
    /// collection_id is an identifier of the DidDocument the resource belongs to.
    /// Format: <unique-identifier>
    ///
    /// Examples:
    /// - c82f2b02-bdab-4dd7-b833-3e143745d612
    /// - wGHEXrZvJxR8vw5P3UWH1j
    #[prost(string, tag = "1")]
    pub collection_id: ::prost::alloc::string::String,
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
/// QueryCollectionResourcesResponse is the response type for the Query/CollectionResources RPC method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCollectionResourcesResponse {
    /// resources is the requested collection of resource metadata
    #[prost(message, repeated, tag = "1")]
    pub resources: ::prost::alloc::vec::Vec<Metadata>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service for the resource module
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Fetch data/payload for a specific resource (without metadata)
        pub async fn resource(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryResourceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryResourceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cheqd.resource.v2.Query/Resource",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cheqd.resource.v2.Query", "Resource"));
            self.inner.unary(req, path, codec).await
        }
        /// Fetch only metadata for a specific resource
        pub async fn resource_metadata(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryResourceMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryResourceMetadataResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cheqd.resource.v2.Query/ResourceMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cheqd.resource.v2.Query", "ResourceMetadata"));
            self.inner.unary(req, path, codec).await
        }
        /// Fetch metadata for all resources in a collection
        pub async fn collection_resources(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryCollectionResourcesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryCollectionResourcesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cheqd.resource.v2.Query/CollectionResources",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("cheqd.resource.v2.Query", "CollectionResources"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
